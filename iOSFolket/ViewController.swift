//
//  ViewController.swift
//  iOSFolket
//
//  Created by Christopher Loessl on 08/12/15.
//  Copyright © 2015 iOSFolket. All rights reserved.
//

import UIKit
import SWXMLHash

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated)
        
        test()
    }
    
    func test() {

        let xmlWithNamespace = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
        "<dictionary comment=\"generated by DictionaryTransformer\" created=\"2011-03-03\" last-changed=\"2012-08-18\" name=\"Folkets English-Swedish dictionary\" source-language=\"sv\" target-language=\"en\" version=\"1.0.213\" license=\"http://creativecommons.org/licenses/by-sa/2.5/\" licenseComment=\"Distributed under the Creative Commons Attribution-Share Alike 2.5 Generic license\" originURL=\"http://folkets-lexikon.csc.kth.se\">" +
        "<word value=\"bil\" lang=\"sv\" class=\"nn\">" +
        "<translation value=\"motorcar\" />" +
        "<translation value=\"car\" />" +
        "<translation value=\"(automobile [US])\" />" +
        "<translation value=\"(auto [US])\" />" +
        "<phonetic value=\"bi:l\" soundFile=\"bil.swf\" />" +
        "<paradigm>" +
        "<inflection value=\"bilen\" />" +
        "<inflection value=\"bilar\" />" +
        "</paradigm>" +
        "<synonym value=\"automobil\" level=\"4.8\" />" +
        "<synonym value=\"motorfordon\" level=\"3.5\" />" +
        "<synonym value=\"åkdon\" level=\"3.5\" />" +
        "<see value=\"bil||bil..1||bil..nn.1\" type=\"saldo\" />" +
        "<example value=\"åka bil\">" +
        "<translation value=\"go by car\" />" +
        "</example>" +
        "<compound value=\"bil|trafik\">" +
        "<translation value=\"motor traffic\" />" +
        "</compound>" +
        "<compound value=\"lastbil\">" +
        "<translation value=\"lorry, (truck [US])\" />" +
        "</compound>" +
        "<compound value=\"bil|sjuka\">" +
        "<translation value=\"carsickness\" />" +
        "</compound>" +
        "<compound value=\"bil|telefon\">" +
        "<translation value=\"car phone\" />" +
        "</compound>" +
        "<compound value=\"bil|fri\">" +
        "<translation value=\"free of cars\" />" +
        "</compound>" +
        "<compound value=\"bil|sjuk\">" +
        "<translation value=\"carsick\" />" +
        "</compound>" +
        "<compound value=\"personbil\">" +
        "<translation value=\"passenger car\" />" +
        "</compound>" +
        "<compound value=\"bil|buren\">" +
        "<translation value=\"motorized\" />" +
        "</compound>" +
        "<definition value=\"ett slags motordrivet fordon\" />" +
        "<url value=\"17/bil1.swf\" type=\"any\" />" +
        "<url value=\"16/stad1.swf\" type=\"any\" />" +
        "</word>"
        
        func parseDictionary(dictionary: XMLIndexer) -> [Word] {
            var words = [Word]()
            
            for childWord in dictionary["word"].all {
                let word = parseWord(childWord)
                words.append(word)
            }
            
            return words
        }
        
        func parseWord(childWord: XMLIndexer) -> Word {
            let value = childWord.element?.attributes["value"]
            let language = childWord.element?.attributes["lang"]
            let wordClass = childWord.element?.attributes["class"]
            let word = Word()

            word.value = value!
            word.language = language!
            word.wordClass = wordClass!
            
            for childTranslation in childWord["translation"].all {
                let translation = parseTranslation(childTranslation, original: word.value)
                word.translations.append(translation)
            }
            
            return word
        }
        
        func parseTranslation(childTranslation: XMLIndexer, original: String) -> Translation {
            let value = childTranslation.element?.attributes["value"]
            let translation = Translation()
            translation.original = original;
            translation.translation = value!;
            
            return translation;
        }
        
        let xml = SWXMLHash.parse(xmlWithNamespace)
        
        let words = parseDictionary(xml["dictionary"])
        
        print(words);
        

    }

}

